/* This code is unused. I've kept it in case Toby decides to once more update the game in an unpackable format.
a well as some other garbage
	
			public const string UnpackBatchFile =
            "cd bin\n" +
            "peazip.exe -ext2folder ../Undertale.exe";



			if (!Directory.Exists("./Undertale") || !Directory.Exists("./Data"))
            {

                TextWriter unpackbatch; // creating _unpack.bat
                unpackbatch = Safe.OpenStreamWriter("./bin/_unpack.bat");

                if (unpackbatch == null)
                {
                    return false;
                }

                try
                {
                    unpackbatch.Write(UnpackBatchFile);
                }
                catch (Exception ex)
                {
                    if (ex is IOException)
                    {
                        MessageBox.Show($"IOException has occured while saving the ./bin/_unpack.bat. Please try again.");
                    }
                    else if (ex is ObjectDisposedException)
                    {
                        MessageBox.Show($"ObjectDisposedException has occured while saving the modified ./bin/_unpack.bat. Should never happen.");
                    }
                    else
                    {
                        MessageBox.Show("Exception " + ex + $" has occured while saving the modified ./bin/_unpack.bat as a text file. Should never happen.");
                    }
                    return false;
                }

                unpackbatch.Close();

                Process PR = new Process { StartInfo = new ProcessStartInfo(".\\bin\\_unpack.bat") };  // running _unpack.bat 

                try
                {
                    PR.Start();
                }
                catch (Exception ex)
                {
                    if (ex is InvalidOperationException)
                    {
                        MessageBox.Show(
                            "InvalidOperationException has occured while starting ./bin/_unpack.bat. Should never happen.");
                    }
                    else if (ex is ArgumentNullException)
                    {
                        MessageBox.Show(
                            "ArgumentNullException has occured while starting ./bin/_unpack.bat. Should never happen.");
                    }
                    else if (ex is ObjectDisposedException)
                    {
                        MessageBox.Show(
                            "ObjectDisposedException has occured while starting ./bin/_unpack.bat. Should never happen.");
                    }
                    else if (ex is FileNotFoundException)
                    {
                        MessageBox.Show(
                            "FileNotFoundException has occured while starting ./bin/_unpack.bat. Please ensure that the file ./bin/_unpack.bat exists and try again.");
                    }
                    else if (ex is Win32Exception)
                    {
                        MessageBox.Show(
                            "Win32Exception has occured while starting ./bin/_unpack.bat. Please try again.");
                    }
                    else
                    {
                        MessageBox.Show(
                            "Exception " + ex + " has occured while starting ./bin/_unpack.bat. Please try again.");
                    }
                    return false;
                }

                PR.WaitForExit();

                // Cleanup
                if (!Safe.DeleteFile("./bin/_unpack.bat"))
                {
                    return false;
                }

                if (Directory.Exists("./Data"))
                {
                    if (!Safe.DeleteDirectory("./Data"))
                    {
                        return false;
                    }
                }

                if (!Safe.CreateDirectory("./Data"))
                {
                    return false;
                }

                if (!Safe.CreateDirectory("./tmp"))
                {
                    return false;
                }

                if (!Safe.CopyFile("./Undertale/data.win", "./Data/data.win"))
                {
                    return false;
                }

                if (!Safe.MoveFile("./Undertale.exe", "./tmp/Undertale.exe"))
                {
                    return false;
                }

                if (!Safe.DeleteFile("./Undertale.exe"))
                {
                    return false;
                }

                List<string> fls = Safe.GetFiles("./Undertale");
                if (fls == null) { return false; }

                foreach (string a in fls)
                {
                    if (!Safe.MoveFile(a, a.Replace("/Undertale", ""))) { return false; }
                }

                foreach (string a in fls)
                {
                    if (!Safe.DeleteFile(a)) { return false; }
                }

                if (!Safe.MoveFile("./tmp/Undertale.exe", "./Undertale/Undertale.exe"))
                {
                    return false;
                }

                if (!Safe.DeleteDirectory("./tmp"))
                {
                    return false;
                }
            }

			/*

            for (int i = 0; i < strnum; i++)
            {
                byte[] a = new byte[4];
                data.Read(a, 0, 4);
                strptrs[i] = new StringCont(a, (int)data.Position, new List<byte>());
            }
            List<StringCont> dialstr = new List<StringCont>();
            List<StringCont> goodstr = new List<StringCont>();
            List<StringCont> batlstr = new List<StringCont>();
            

            foreach (StringCont s in strptrs)
            {
                data.Position = s.adr;
                byte control = (byte)data.ReadByte();

                List<byte> str = new List<byte>();
                bool smth = false;
                while (true)
                {
                    str.Add((byte)data.ReadByte());
                    if (str[str.Count - 1] == 0 && smth) { break; }
                    if (str[str.Count - 1] != 0) { smth = true; }
                    //if (control == 8 || control == 18 || control == 12 || control == 4) { break; }
                }

                string rstr = new string(str.Select(x => (char)x).ToArray());

                /* if (rstr.Contains("/%%"))
                 {
                     dialstr.Add(s);
                     // Console.WriteLine(rstr);

                 }
                /* else if (rstr.Contains("%%%"))
                 {
                     batlstr.Add(s);
                 }
                if (rstr.Length >= 3)
                {

                    if (rstr.Contains("/%") && !(bannedwords.Any(rstr.Contains))) { dialstr.Add(new StringCont(s.badr, s.loc, str)); }
                    /*else
                    { goodstr.Add(new StringCont(s.badr, s.loc, str)); }

                    goodstr.Add(s);
                }

                //Console.WriteLine(adr);
                /*if (!(bannedwords.Any(rstr.Contains)) && rstr.Length >= 4)
                {

                    data.Position -= 4;
                    data.Write(new byte[] { (byte)'/', (byte)'%', (byte)'%' }, 0, 3);
                    goodstr.Add(s);
                }
            }
            // dialstr = dialstr.OrderBy(x => RNG.Next()).ToList();
            // goodstr = goodstr.OrderBy(x => RNG.Next()).ToList();
            foreach (StringCont y in dialstr) { y.bstr = Ext.Garble(y.bstr, 1); }
            //Ext.Shuffle(goodstr);
            //Ext.Shuffle(dialstr);

            for (int i = 0; i < dialstr.Count; i++)
            {
                data.Position = dialstr[i].adr + 1;


                // Console.WriteLine(BitConverter.ToInt32(strptrs[i], 0));
                data.Write(dialstr[i].bstr, 0, dialstr[i].bstr.Count());


                data.Position = dialstr[(i + 1) % (dialstr.Count - 1)].adr;
                // Console.WriteLine(BitConverter.ToInt32(strptrs[i], 0));
                data.Write(dialstr[i].badr, 0, 4);
            }

            for (int i = 0; i < goodstr.Count; i++)
            {
                data.Position = goodstr[(i + 1) % (goodstr.Count - 1)].adr;
                // Console.WriteLine(BitConverter.ToInt32(strptrs[i], 0));
                data.Write(goodstr[i].badr, 0, 4);
            }

            /*  for (int i = 0; i < batlstr.Count; i++)
              {
                  data.Position = batlstr[(i + 1) % (batlstr.Count - 1)].loc;
                  // Console.WriteLine(BitConverter.ToInt32(strptrs[i], 0));
                  data.Write(batlstr[i].badr, 0, 4);
              }

            data.Position = strptrbgn;



            data.Close();
            Console.WriteLine("string end");
            return true;*/

			    class StringCont
    {
        public byte[] badr;
        public byte[] bstr;
        public int adr;
        //public bool rstr;
        public int loc;

        public StringCont(byte[] a, int l, List<byte> y) { badr = a; adr = BitConverter.ToInt32(a, 0); loc = l; bstr = y.ToArray(); }
    }